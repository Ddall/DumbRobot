<?php

namespace Ddx\Dr\MarketBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Ddx\Dr\MarketBundle\Entity\TradingPair;
use Ddx\Dr\MarketBundle\Entity\Market;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * TradeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class TradeRepository extends EntityRepository
{
    /**
     * @param Market $market
     * @param TradingPair $pair
     * @return Trade
     */
    public function getLastTrade(Market $market, TradingPair $pair){
        return $this->createQueryBuilder('t')
                ->select('t')
                ->where('t.remoteId IS NOT null')
                ->andWhere('t.market = :market_id')
                ->andWhere('t.tradingPair = :tp_id')
                ->orderBy('t.id', 'DESC')
                ->setParameter('market_id', $market->getId() )
                ->setParameter('tp_id', $pair->getId())
                ->setMaxResults(1)
                ->getQuery()->getOneOrNullResult()
                ;
    }
    
    
    /**
     * weighted average trading price
     * @param Market $market
     * @param TradingPair $pair
     * @param integer $interval (in seconds)
     * @return array
     */
    public function getWeightedData(Market $market, TradingPair $pair, $interval = 300){
        $rsm = new ResultSetMapping();
        $sql = 'SELECT 
            (SUM(wPrice) / SUM(volume)) vwap,
            SUM(volume) as volume,
            MIN(timeRemote) as period,
            COUNT(id) as nTrades
            FROM (
                SELECT (volume * price) as wPrice,
                price, volume, timeRemote, market_id, tradingPair_id, id
                FROM trade) as vTrade
            WHERE market_id = :m_id
            AND tradingPair_id = :t_id
            GROUP BY ROUND(UNIX_TIMESTAMP(timeRemote) / :interval);
            ';
        
        $q = $this->getEntityManager()->createNativeQuery($sql, $rsm);
        $q
                ->setParameter('m_id', $market->getId())
                ->setParameter('t_id', $pair->getId())
                ->setParameter('interval', $interval)
                ;
        return $q->getResult();
    }
}
